
// de que using linked lists
#include<stdio.h>
#include<stdlib.h>
struct node
{
    int data;
    struct node*next;
    struct node*prev;
};
struct node*newnode,*ptr,*temp,*news,*sum,*rear=NULL;
struct node*front=NULL;
int main()
{
int p,choice=0,c,pos,i=1;
do
{ 
 printf("\n1.ins_front\t2.ins_rear\t3.del_front\t4.del_rear\t5.display\t6.exit");
scanf("%d",&choice);
switch(choice)
{
            case 1:
            {
        newnode=(struct node*)malloc(sizeof(struct node));
        printf("enter data");
        scanf("%d",&newnode->data);
        newnode->next=NULL;
        newnode->prev=NULL;
        if(front==NULL)
        {
            front=temp=rear=newnode;
        }
         else
            {
              temp=front;
              temp->prev=newnode;
              newnode->next=temp;
              front=newnode;
            }
            break;
        }
        
        case 2:
            {
newnode=(struct node*)malloc(sizeof(struct node));
        printf("enter data");
        scanf("%d",&newnode->data);
        newnode->next=NULL;
        newnode->prev=NULL;
        if(front==NULL)
        {
            front=temp=rear=newnode;
        }
        else
        {
                temp=front;
                while(temp->next!=NULL)
                {
                    temp=temp->next;
                }
              temp->next=newnode;
              newnode->prev=temp;
              rear=newnode;
              break;
            }
            }
  case 3:
   {
     int pos,d,i=1,choice=1;
    if(front==NULL)
    {
        printf("\nlist is empty\n");
    }
            front=front->next;
          break;
        }
    case 4:
        {
        if(front==NULL)
    {
        printf("\nlist is empty\n");
        break;
    }
             temp=front;
             if(front==NULL)
             {
                 printf("empty");
                 break;
             }
             if(front==rear)
             {
                 rear=NULL;
                 front=NULL;
                 printf("empty");
                 break;
             }
             else
             {
             rear=rear->prev;
        rear->next=NULL;
        break;
             }
        }
case 5:
  {
     temp=front;
     if(front==NULL)
     {
       printf("\nempty\n");  
       break;
     }
     else
     {
         printf("\nelements are");
    while(temp!=NULL)
    {
        printf("%d\t",temp->data);
        temp=temp->next;
    }
}
break;
}
case 6:
   {
     exit(0);
      break;
   }
}
}
while(choice<6);
return 0;
}