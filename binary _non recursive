#include <stdio.h>
#include <stdlib.h>
#include <string.h>

struct node {
    struct node *left;
    struct node *right;
    int data;
} *root = NULL, *newNode;

void create();
void insert(struct node *, struct node *);
void inorder_non_recursive(struct node *);
void postorder_non_recursive(struct node *);
void preorder_non_recursive(struct node *);
void create() {
    int element;
    newNode = (struct node *)malloc(sizeof(struct node));
    newNode->right = NULL;
    newNode->left = NULL;
    printf("Enter data: ");
    scanf("%d", &element);
    newNode->data = element;
    if (root == NULL) {
        printf("Root inserted\n");
        root = newNode;
    } else {
        insert(root, newNode);
        printf("Inserted\n");
    }
}

void insert(struct node *root, struct node *newNode) {
    int h;
    printf("Left child or right child (1 for left, 2 for right): ");
    scanf("%d", &h);
    if (h == 1) {
        if (root->left == NULL) {
            root->left = newNode;
            printf("Left root\n");
        } else {
            insert(root->left, newNode);
        }
    } else if (h == 2) {
        if (root->right == NULL) {
            root->right = newNode;
            printf("Right root\n");
        } else {
            insert(root->right, newNode);
        }
    }
}

void inorder_non_recursive(struct node *root) {
    struct node *stack[100];
    int top = -1;
    struct node *current = root;

    while (current != NULL || top != -1) {
        while (current != NULL) {
            stack[++top] = current;
            current = current->left;
        }
        current = stack[top--];
        printf("%d ", current->data);
        current = current->right;
    }
}

void preorder_non_recursive(struct node *root) {
    struct node *stack[100];
    int top = -1;
    if (root != NULL) {
        stack[++top] = root;
    }

    while (top != -1) {
        struct node *current = stack[top--];
        printf("%d ", current->data);

        if (current->right != NULL) {
            stack[++top] = current->right;
        }
        if (current->left != NULL) {
            stack[++top] = current->left;
        }
    }
}

void postorder_non_recursive(struct node *root) {
    struct node *stack1[100], *stack2[100];
    int top1 = -1, top2 = -1;
    if (root != NULL) {
        stack1[++top1] = root;
    }

    while (top1 != -1) {
        struct node *current = stack1[top1--];
        stack2[++top2] = current;

        if (current->left != NULL) {
            stack1[++top1] = current->left;
        }
        if (current->right != NULL) {
            stack1[++top1] = current->right;
        }
    }

    while (top2 != -1) {
        struct node *current = stack2[top2--];
        printf("%d ", current->data);
    }
}

int main() {
    int ch;
    printf("\n1. Create & Insert\n2. Postorder\n3. Preorder\n4. Inorder\n5. Exit\n");
    while (1) {
        printf("\nEnter choice: ");
        scanf("%d", &ch);
        switch (ch) {
            case 1:
                create();
                break;
            case 2:
                if (root == NULL) {
                    printf("Empty\n");
                } else {
                    printf("Postorder: ");
                    postorder_non_recursive(root);
                    printf("\n");
                }
                break;
            case 3:
                if (root == NULL) {
                    printf("Empty\n");
                } else {
                    printf("Preorder: ");
                    preorder_non_recursive(root);
                    printf("\n");
                }
                break;
            case 4:
                if (root == NULL) {
                    printf("Empty\n");
                } else {
                    printf("Inorder: ");
                    inorder_non_recursive(root);
                    printf("\n");
                }
                break;
            case 5:
                exit(0);
                break;
            default:
                printf("Invalid choice\n");
        }
    }
    return 0;
}
