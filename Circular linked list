//circular linked liat
#include <stdio.h>
#include <stdlib.h>

struct node  
{  
    struct node *prev;  
    struct node *next;  
    int data;  
};  

struct node *head = NULL, *tail = NULL; 

void create();
void in_beg();  
void in_end();  
void in_pos();  
void del_beg();  
void del_end();  
void del_pos();  
void display();  

void main ()  
{  
    int choice = 0;  
    
    while(choice != 9)  
    {  
        printf("\n1. In_beg\n2. In_end\n3. In_pos\n4. Del_beg\n5. Del_end\n6. Del_pos\n7. Create\n8. Show\n9. Exit\n");  
        printf("Enter your choice: ");  
        scanf("%d", &choice);  
        
        switch(choice)  
        {  
            case 1:  
                in_beg();  
                break;  
            case 2:  
                in_end();  
                break;  
            case 3:  
                in_pos();  
                break;  
            case 4:  
                del_beg();  
                break;  
            case 5:  
                del_end();  
                break;  
            case 6:  
                del_pos();  
                break;  
            case 7:  
                create();  
                break;  
            case 8:  
                display();  
                break;  
            case 9:  
                exit(0);  
                break;  
            default:  
                printf("Please enter valid choice..\n");  
        }  
    }  
}  

void create()
{
    struct node *newnode;
    newnode = (struct node*)malloc(sizeof(struct node));
    
    printf("Enter the data: ");
    scanf("%d", &newnode->data);
    
    if(head == NULL)
    {
        head = tail = newnode;
        newnode->prev = tail;
        newnode->next = head;
    }
    else
    {
        tail->next = newnode;
        newnode->prev = tail;
        newnode->next = head;
        head->prev = newnode;
        tail = newnode;
    }
}

void in_beg()  
{     
    struct node *newnode;
    newnode = (struct node*)malloc(sizeof(struct node));
    
    printf("Enter the data: ");
    scanf("%d", &newnode->data);
    
    if(head == NULL)
    {
        head = tail = newnode;
        newnode->prev = tail;
        newnode->next = head;
    }
    else
    {
        newnode->next = head;
        head->prev = newnode;
        newnode->prev = tail;
        tail->next = newnode;
        head = newnode;
    }
    
    printf("\nNode inserted\n");  
}  
     
void in_end()  
{
    struct node *newnode;
    newnode = (struct node*)malloc(sizeof(struct node));
    
    printf("Enter the data: ");
    scanf("%d", &newnode->data);
    
    newnode->prev = tail;
    tail->next = newnode;
    newnode->next = head;
    head->prev = newnode;
    tail = newnode;
    
    printf("\nNode inserted\n");  
}  

void in_pos()  
{  
    struct node *temp, *newnode;
    int pos, i = 1;
    
    newnode = (struct node*)malloc(sizeof(struct node));
    
    printf("Enter the position: ");
    scanf("%d", &pos);
    
    printf("Enter the data: ");
    scanf("%d", &newnode->data);
    
    temp = head;
    while(i < pos - 1 && temp->next != head)
    {
        temp = temp->next;
        i++;
    }
    
    newnode->prev = temp;
    newnode->next = temp->next;
    temp->next->prev = newnode;
    temp->next = newnode;
    
    printf("\nNode inserted at position %d\n", pos);  
}  

void del_beg()  
{  
    if(head == NULL)
    {
        printf("List is empty\n");
        return;
    }
    
    if(head == tail)
    {
        free(head);
        head = tail = NULL;
    }
    else
    {
        head = head->next;
        free(head->prev);
        head->prev = tail;
        tail->next = head;
    }
    
    printf("Node deleted from the beginning\n");
}  

void del_end()  
{  
    struct node *temp;
    
    if(head == NULL)
    {
        printf("List is empty\n");
        return;
    }
    
    if(head == tail)
    {
        free(head);
        head = tail = NULL;
    }
    else
    {
        temp = tail;
        tail = tail->prev;
        free(temp);
        tail->next = head;
        head->prev = tail;
    }
    
    printf("Node deleted from the end\n");
}  

void del_pos()  
{  
    if(head == NULL)
    {
        printf("List is empty\n");
        return;
    }
    
    struct node *temp;
    int pos, i = 1;
    
    printf("Enter the position to delete: ");
    scanf("%d", &pos);
    
    temp = head;
    while(i < pos && temp != NULL)
    {
        temp = temp->next;
        i++;
    }
    
    if(temp == NULL)
    {
        printf("Position not found\n");
        return;
    }
    
    if(temp == head)
    {
        del_beg();
        return;
    }
    else if(temp == tail)
    {
        del_end();
        return;
    }
    
    temp->prev->next = temp->next;
    temp->next->prev = temp->prev;
    free(temp);
    
    printf("Node deleted from position %d\n", pos);
}  

void display()  
{  
    if(head == NULL)
    {
        printf("List is empty\n");
        return;
    }
    
    struct node *temp = head;
    
    printf("Circular Linked List: ");
    do
    {
        printf("%d ", temp->data);
        temp = temp->next;
    } while(temp != head);
    printf("\n");
}  
